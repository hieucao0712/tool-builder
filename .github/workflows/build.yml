name: Build and Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build (default: master)"
        required: true
        type: string
        default: master

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-latest
          - macos-13
    runs-on: ${{ matrix.os }}
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      latest: ${{ steps.set-tag.outputs.latest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone Repository
        run: |
          git clone --depth 1 --branch ${{ github.event.inputs.branch }} https://${{ secrets.GH_PAT }}@github.com/${{ secrets.SPINE_REPO }} repo
          cd repo
          git submodule update --init --recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies Node.js
        working-directory: repo
        run: npm install

      - name: Build Electron App
        working-directory: repo
        run: npm run make

      - name: Get Version And Set Tag
        id: set-tag
        working-directory: repo
        shell: bash
        run: |
          echo "Get version from package.json..."
          VERSION=$(node -p "require('./package.json').version")
          echo "Version: $VERSION"

          BRANCH="${{ github.event.inputs.branch }}"
          SAFE_BRANCH=$(echo "$BRANCH" | sed 's|/|-|g')

          if [ "$SAFE_BRANCH" = "master" ]; then
            TAG="v$VERSION"
            LATEST="true"
          else
            TAG="v$VERSION-$SAFE_BRANCH"
            LATEST="false"
          fi

          echo "Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tool-${{ matrix.os }}-${{ steps.set-tag.outputs.tag }}
          path: repo/out/make/*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          files: releases/**/*
          tag_name: ${{ needs.build.outputs.tag }}
          name: Tool - ${{ needs.build.outputs.tag }}
          make_latest: ${{ needs.build.outputs.latest }}
          draft: false
          prerelease: false
          preserve_order: true
          repository: ${{ secrets.SPINE_REPO }}

  cleanup:
    name: Cleanup
    needs:
      - build
      - release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete All Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: "*"
